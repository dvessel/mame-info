#!/usr/bin/env zsh


function main {
  zparseopts -D -E -F - {d,-dry-run}=dryrun || return 1

  if test -z $1 && type mame >/dev/null; then
    scandir=`eval print $( mame -showconfig | awk '$1=="rompath" { $1=""; print $0 }')`
  fi
  scandir=${scandir:-${1:a}}

  if [[ -z $scandir ]]; then
    print "No scan directory specified." >&2
    return 1
  fi
  if [[ ! -d $scandir ]]; then
    print "Scan directory does not exist:\n$scandir"  >&2
    return 1
  fi

  scanlog=$__selfdir/scan.log
  infodir=$__selfdir/info
  mkdir -p $scanlog:h $infodir

  self-log info "initiating scan:$scandir"

  local current{,file,info}

  for currentfile in $scandir/*.(zip|7z|chd)(N); do

    current=$currentfile:t:r
    currentinfo=$infodir/$current

    if [[ ! -s $currentinfo ]]; then
      self-log warning "$currentfile:t not recognized."
      continue
    fi

    local parent='' settags=() ftags=(
      "MAME Incomplete"
      "MAME Preliminary"
      "MAME BIOS"
      "MAME Device"
      "MAME Mechanical"
    )

    while read -r info; do
      case $info in
        description:*)  description=${info#*:}  ;;
        manufacturer:*) manufacturer=${info#*:} ;;
        year:*)         year=${info#*:}         ;;
        status:preliminary) settags+="MAME Preliminary"  ;;
        kind:bios)          settags+="MAME BIOS"         ;;
        kind:device)        settags+="MAME Device"       ;;
        kind:mechanical)    settags+="MAME Mechanical"   ;;
        (device|romof):*)
          dependency=${info/*:}
          ftags+=( +$dependency -$dependency )
          __depexists=( $scandir/$dependency.(zip|7z)(N) )
          if [[ ! -z $__depexists ]]; then
            settags+="+$dependency"
          else
            settags=( "MAME Incomplete" -$dependency $settags )
            self-log warning "[$current] \"$description\" is missing ${info/:*} [$dependency]."
          fi
        ;;
        cloneof:*) parent=${info/*:} ;;
        disk:*)
          dependency=${info/*:}
          # disk names with a comma are tagged with ':comma:' instead of a literal comma.
          # This is a limitation of the tag command.
          disktag=${dependency/,/:comma:}
          for set in $parent $current; do
            ftags+=( +$set/$disktag -$set/$disktag )
            __depexists=( $scandir/$set/$dependency.chd(N) )
            if [[ ! -z $__depexists ]]; then
              settags+="+$set/$disktag"
              break
            elif [[ $set == $current ]]; then
              settags=( "MAME Incomplete" -$set/$disktag $settags )
              self-log warning "[$current] \"$description\" is missing ${info/:*} [$dependency]."
            fi
          done
        ;;
      esac
    done < <( cat $currentinfo )

    if [[ -n $settags ]]; then
      [[ -n $dryrun ]] || set-tags
      printf "%-20s %s\n" $currentfile:t "`present-tags $settags`"
    fi
  done
}

# ignores tags set outside the scope of this script run.
function set-tags {
  local IFS=$'\n'
  typeset -gaU settags ftags
  typeset -aU currenttags

  currenttags=( `tag -gN $currentfile` )
  filetags=( ${currenttags:*ftags} )

  # intersection of settags and filetags compared with settags.
  if [[ ${settags:*filetags} != ${settags} ]]; then
    tag -r ${(j[,])filetags} $currentfile
    tag -a ${(j[,])settags} $currentfile
    self-log info "[$current] \"$description\" was tagged ${(j[,])settags}."
  fi
}

function present-tags {
  typeset -a tags
  for t in $@; do
    t=${t/MAME /}
    case $t in
      Preliminary) tags+="\033[0;35m$t\033[0m" ;;
      BIOS)        tags+="\033[0;33m$t\033[0m" ;;
      Device)      tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)  tags+="\033[0;34m$t\033[0m" ;;
      Incomplete)  tags+="\033[0;31m$t\033[0m" ;;
      \+*)         tags+="\033[0;32m$t\033[0m" ;;
      \-*)         tags+="\033[4;31m$t\033[0m" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function self-log {
  local category=$1; shift
  printf "%s\t%s\t%s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $scanlog
}

if ! type tag &>/dev/null; then
  print "tag not installed. install through \`brew install tag\` or visit https://github.com/jdberry/tag" >&2
  return 1
fi

__selfdir=$(dirname `realpath $0`)

main $@
