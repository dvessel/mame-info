#!/usr/bin/env zsh

function main {
  zparseopts -D -E -F - \
    {c,-check-dependencies}=checkdependencies \
    {s,-sample-path}:=samplepath \
    {r,-reset-tags}=resettags \
    {d,-dry-run}=dryrun \
    {h,-help}=help || {
      print "see --help" >&2
      return 1
    }

  if (( #help )); then
cat <<- --------
Usage: $__self:t [options] [directory]
Scan ROMs and set tags based on MAME metadata.

Options:
  -c, --check-dependencies  Verify dependencies (BIOS, devices, etc.) are present
                            and prefix with '+' if it exists, '-' if it doesn't
                            'MAME Incomplete' is added if any are missing.
  -s, --sample-path <path>  Optional path to sample files
                            If not provided, defaults to MAME's configured rompath.
  -r, --reset-tags          Remove existing tags before applying new ones
                            Usually unnecessary unless you want to clear all tags
  -d, --dry-run             Show actions without modifying tags
  -h, --help                Show this help message

Directory:
  Path to scan for ROMs (default: MAME's configured rompath if available)

Dependencies:
  Requires the 'tag' utility (install with \`brew install tag\`)

Examples:
  $__self:t /path/to/roms     # Scan ROMs in specified directory
  $__self:t -d                # Dry-run using default directory
  $__self:t -vr roms          # Verify dependencies and reset tags
--------
return
  fi

  if ! (( #1 )) && type mame >/dev/null; then
    read -r scandir sampdir < <( eval print -- $(
      mame -showconfig | awk '$1 == "rompath" || $1 == "samplepath" { $1=""; print }'
    ))
  fi
  scandir=${scandir:-${1:a}}
  sampdir=${samplepath[-1]:-$sampdir}

  if ! (( #scandir )); then
    print "No scan directory specified." >&2
    return 1
  fi
  if [[ ! -d $scandir ]]; then
    print "Scan directory does not exist: $scandir"  >&2
    return 1
  fi

  # check for sample directory only when called with --sample-path option.
  # it will use mameconfig otherwise which is more lax about --check-dependencies.
  if [[ -n $samplepath && ! -d $sampdir ]]; then
    print "Sample directory does not exist: $sampdir" >&2
    return 1
  fi

  if ! (( #dryrun )) && ! type tag &>/dev/null; then
    print "tag not installed. install through \`brew install tag\` or visit https://github.com/jdberry/tag" >&2
    return 1
  fi

  scanlog=$__self:h/scan.log
  infodir=$__self:h/info

  self-log info "initiating scan:$scandir"

  local current{,file,info}

  for currentfile in $scandir/*.(zip|7z)(N); do

    current=$currentfile:t:r
    currentinfo=$infodir/$current
    __current=$current

    if [[ ! -s $currentinfo ]]; then
      self-log warning "$currentfile:t not recognized."
      continue
    fi

    unset description manufacturer year workstatus kind parent sample devices romof disks
    typeset -a kind devices romof parent sample disks

    while read -r info; do
      case $info in
        description:*)  description=${info#*:}  ;;
        manufacturer:*) manufacturer=${info#*:} ;;
        year:*)         year=${info#*:}         ;;
        status:*)       workstatus=${info#*:}   ;; # good|imperfect|preliminary
        kind:*)         kind+=(${info#*:})      ;; # bios|device|mechanical,coinop
        device:*)       devices+=(${info#*:})   ;;
        romof:*)        romof+=(${info#*:})     ;; # bios,parent
        cloneof:*)      parent=(${info#*:})     ;;
        sampleof:*)     sample=(${info#*:})     ;;
        disk:*)         disks+=(${info#*:})     ;;
      esac
    done < <( cat $currentinfo )

    typeset -U __tags=() __ftags=(
      "MAME Imperfect"
      "MAME Preliminary"
      "MAME BIOS"
      "MAME Device"
      "MAME Mechanical"
    )

    __description=$description

    tag-set status $workstatus
    tag-set kind $kind
    tag-set-dependencies device $devices
    tag-set-dependencies bios ${romof:|parent}
    tag-set-dependencies parent $parent
    tag-set-dependencies disk $disks
    tag-set-dependencies sample $sample

    if (( #__tags )); then
      (( #dryrun )) || tag-apply
      printf "%-20s %s\n" $currentfile:t "`tag-present $__tags`"
    fi
  done
}

function tag-set {
  local key=$1 value
  shift

  for value in $@; case $key:$value in
    status:imperfect)   __tags+="MAME Imperfect"  ;;
    status:preliminary) __tags+="MAME Preliminary";;
    kind:bios)          __tags+="MAME BIOS"       ;;
    kind:device)        __tags+="MAME Device"     ;;
    kind:mechanical)    __tags+="MAME Mechanical" ;;
  esac
}

function tag-set-dependencies {
  local IFS=$'\n' kind=$1; shift
  typeset -aU exists missed dependencies=( $@ )

  (( #dependencies )) || return

  __ftags+=(
    "MAME Incomplete"
    `printf "+$kind:%s\n" $dependencies`
    `printf "-$kind:%s\n" $dependencies`
    `printf  "$kind:%s\n" $dependencies`
  )

  # not checked by default.
  if ! (( #checkdependencies )); then
    __tags+=( `printf "$kind:%s\n" $dependencies` )
    return
  fi

  # check existance of dependencies
  case $kind in
    device|bios|parent)
      # eval to give $dependencies a chance to expand early.
      eval "exists=( $scandir:q/(${(j[|])dependencies}).(zip|7z)(N:t:r) )"
      missed=( ${dependencies:|exists} )
    ;;
    disk)
      # check both parent and clone if that relationship exists.
      eval "exists=( $scandir:q/($parent|$current)/(${(j[|])dependencies}).chd(N:t:r) )"
      missed=( ${dependencies:|exists} )
      # disk names with a comma are tagged with ':comma:' instead of a literal comma.
      # This is a limitation of the tag command. it's exceedingly rare but it's there.
      exists=( ${exists/,/:comma:} )
      missed=( ${missed/,/:comma:} )
    ;;
    sample)
      if [[ -d $sampdir ]]; then
        exists=( $sampdir:q/$dependencies.(zip|7z)(N:t:r) )
        missed=( ${dependencies:|exists} )
      else
        __tags+=( `printf "$kind:%s\n" $dependencies` )
        return
      fi
    ;;
  esac

  if (( #exists )); then
    __tags+=( `printf "+$kind:%s\n" $exists` )
  fi
  if (( #missed )); then
    __tags=( "MAME Incomplete" `printf "-$kind:%s\n" $missed` $__tags )
    self-log warning "[$__current] \"$__description\" is missing $kind [${(j[,])missed}]."
  fi
}

function tag-apply {
  local IFS=$'\n'
  typeset -aU currenttags filetags

  currenttags=( `tag -gN $currentfile` )
  # when resetting, use all current tags.
  # otherwise, limit to tags set in __ftags.
  (( #resettags )) \
    && filetags=( $currenttags ) \
    || filetags=( ${currenttags:*__ftags} )

  # intersection ${__tags:*filetags} maintains order for comparison.
  if [[ ${__tags:*filetags} != $__tags ]]; then
    tag -r ${(j[,])filetags} $currentfile
    tag -a ${(j[,])__tags} $currentfile
    self-log info "[$current] \"$__description\" was tagged [${(j[,])__tags}]."
  fi
}

function tag-present {
  typeset -aU tags

  for t in $@; do
    t=${t/MAME /}
    case $t in
      Incomplete)     tags+="\033[3;31m$t\033[0m" ;;
      Imperfect)      tags+="\033[3;35m$t\033[0m" ;;
      Preliminary)    tags+="\033[3;35m$t\033[0m" ;;
      BIOS)           tags+="\033[0;33m$t\033[0m" ;;
      Device)         tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)     tags+="\033[0;34m$t\033[0m" ;;
      \-*)            tags+="\033[4;31m$t\033[0m" ;;
      (\+|)bios:*)    tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)device:*)  tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)parent:*)  tags+="\033[0;34m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)disk:*)    tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
      (\+|)sample:*)  tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
      *)              tags+="\033[4;30m$t\033[0m" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function self-log {
  local category=$1; shift
  printf "%s\t%s\t%s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $scanlog
}

__self=`realpath $0`

main $@
