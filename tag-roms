#!/usr/bin/env zsh


function main {
  zparseopts -D -E -F - {d,-dry-run}=dryrun || return 1

  if test -z $1 && type mame >/dev/null; then
    scandir=`eval print $( mame -showconfig | awk '$1=="rompath" { $1=""; print $0 }')`
  fi
  scandir=${scandir:-${1:a}}

  if [[ -z $scandir ]]; then
    print "No scan directory specified." >&2
    return 1
  fi
  if [[ ! -d $scandir ]]; then
    print "Scan directory does not exist:\n$scandir"  >&2
    return 1
  fi

  scanlog=$__selfdir/scan.log
  infodir=$__selfdir/info
  mkdir -p $scanlog:h $infodir

  self-log info "initiating scan:$scandir"

  local current{,file,info}

  for currentfile in $scandir/*.(zip|7z)(N); do

    current=$currentfile:t:r
    currentinfo=$infodir/$current

    if [[ ! -s $currentinfo ]]; then
      self-log warning "$currentfile:t not recognized."
      continue
    fi

    unset {description,manufacturer,year,workstatus,kind,parent,devices,romof,disks}

    while read -r info; do
      case $info in
        description:*)  description=${info#*:}  ;;
        manufacturer:*) manufacturer=${info#*:} ;;
        year:*)         year=${info#*:}         ;;
        status:*)       workstatus=${info#*:}   ;;
        kind:*)         kind=${info#*:}         ;;
        cloneof:*)      parent=${info#*:}       ;;
        device:*)       devices+=( ${info#*:} ) ;;
        romof:*)        romof+=( ${info#*:} )   ;;
        disk:*)         disks+=( ${info#*:} )   ;;
      esac
    done < <( cat $currentinfo )

    local settags=() ftags=(
      "MAME Incomplete"
      "MAME Imperfect"
      "MAME Preliminary"
      "MAME BIOS"
      "MAME Device"
      "MAME Mechanical"
    )

    case $workstatus in
      good)                                     ;;
      imperfect)    settags+="MAME Imperfect"   ;;
      preliminary)  settags+="MAME Preliminary" ;;
    esac

    case $kind in
      bios)         settags+="MAME BIOS"        ;;
      device)       settags+="MAME Device"      ;;
      mechanical)   settags+="MAME Mechanical"  ;;
    esac

    for _type in device romof disk; do
      case $_type in
        device) dependencies=( $devices ) ;;
        romof)  dependencies=( $romof )   ;;
        disk)   dependencies=( $disks )   ;;
      esac

      for dependency in $dependencies; do
        case $_type in
          device)
            type=device
            __depexists=( $scandir/$dependency.(zip|7z)(N) )
          ;;
          romof)
            # romof is either a parent rom or bios.
            if [[ $dependency == $parent ]]; then
              type=parent
            else
              type=bios
            fi
            __depexists=( $scandir/$dependency.(zip|7z)(N) )
          ;;
          disk)
            type=disk
            # check both parent and clone if that relationship exists.
            for set in $parent $current; do
              __depexists=( $scandir/$set/$dependency.chd(N) )
              [[ -z $__depexists ]] || break
            done
            # disk names with a comma are tagged with ':comma:' instead of a literal comma.
            # This is a limitation of the tag command. it's exceedingly rare but it's there.
            dependency=${dependency/,/:comma:}
          ;;
        esac

        ftags+=( +$type:$dependency -$type:$dependency )
        if [[ ! -z $__depexists ]]; then
          settags+="+$type:$dependency"
        else
          settags=( "MAME Incomplete" -$type:$dependency $settags )
          self-log warning "[$current] \"$description\" is missing $type [$dependency]."
        fi
      done
    done

    if [[ -n $settags ]]; then
      [[ -n $dryrun ]] || set-tags
      printf "%-20s %s\n" $currentfile:t "`present-tags $settags`"
    fi
  done
}

# ignores tags set outside the scope of this script run.
function set-tags {
  local IFS=$'\n'
  typeset -gaU settags ftags

  currenttags=( `tag -gN $currentfile` )
  filetags=( ${currenttags:*ftags} )

  # intersection of settags and filetags compared with settags.
  if [[ ${settags:*filetags} != ${settags} ]]; then
    tag -r ${(j[,])filetags} $currentfile
    tag -a ${(j[,])settags} $currentfile
    self-log info "[$current] \"$description\" was tagged [${(j[,])settags}]."
  fi
}

function present-tags {
  typeset -a tags
  for t in $@; do
    t=${t/MAME /}
    case $t in
      Incomplete)  tags+="\033[3;31m$t\033[0m" ;;
      Imperfect)   tags+="\033[3;35m$t\033[0m" ;;
      Preliminary) tags+="\033[3;35m$t\033[0m" ;;
      BIOS)        tags+="\033[0;33m$t\033[0m" ;;
      Device)      tags+="\033[0;33m$t\033[0m" ;;
      Mechanical)  tags+="\033[0;33m$t\033[0m" ;;
      \-*)         tags+="\033[4;31m$t\033[0m" ;;
      \+bios:*)    tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      \+device:*)  tags+="\033[0;33m${t/:*}:\033[0m${t/*:}" ;;
      \+parent:*)  tags+="\033[0;34m${t/:*}:\033[0m${t/*:}" ;;
      \+disk:*)    tags+="\033[0;36m${t/:*}:\033[0m${t/*:}" ;;
    esac
  done
  printf "${(j[,])tags}"
}

function self-log {
  local category=$1; shift
  printf "%s\t%s\t%s\n" "`date -u +%Y-%m-%dT%H:%M:%SZ`" $category "$@" >> $scanlog
}

if ! type tag &>/dev/null; then
  print "tag not installed. install through \`brew install tag\` or visit https://github.com/jdberry/tag" >&2
  return 1
fi

__selfdir=$(dirname `realpath $0`)

main $@
